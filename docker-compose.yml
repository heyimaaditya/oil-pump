version: '3.8'

secrets:
  postgres_password_secret:
    file: ./postgres_password.txt 

services:
  # --- Core Infrastructure ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    networks:
      - oil-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    networks:
      - oil-network
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
        test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"] 
        interval: 15s
        timeout: 10s
        retries: 10 

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    secrets:
      - postgres_password_secret
    networks:
      - oil-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oil}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password_secret
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-oil}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # --- Backend Services ---
  data-producer:
    build:
      context: ./data-producer
      dockerfile: Dockerfile
    container_name: data_producer_service
    networks:
      - oil-network
    env_file:
      - .env
    environment:
      NODE_ENV: production
      KAFKA_BROKERS: kafka:9092 
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure

  data-consumer:
    build:
      context: ./data-consumer
      dockerfile: Dockerfile
    container_name: data_consumer_service
    secrets:
      - postgres_password_secret
    networks:
      - oil-network
    env_file:
      - .env
    ports:
    
      - "${API_PORT:-8080}:${API_PORT:-8080}"
    environment:
      NODE_ENV: production 
   
      POSTGRES_HOST: postgres 
      KAFKA_BROKERS: kafka:9092 
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

  # --- Frontend Service ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
   
    container_name: frontend_app
    networks:
      - oil-network
    ports:
      - "4200:80" 
    depends_on:
      - data-consumer 
    restart: unless-stopped


volumes:
  postgres_data: 

networks:
  oil-network:
    driver: bridge
